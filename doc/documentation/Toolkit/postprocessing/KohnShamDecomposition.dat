----------------------------------------Purpose--------------------------------------------------------
This code performs the Kohn Sham Decomposition from the projections calculated by td_occup command in the time dependent propagation run of the octopus package.
It prints dmat.dat which is the time dependent projections in the Kohn Sham basis. dmatw.dat is same in frequency space calculated from fourier transformation. 



-------------------------------------Dependencies-------------------------------------------------------
projections file calculated in td.general folder  for  a time dependent propagation run and info calculated in static folder from ground state calculation are required for the calculation.
A file by name My_tdden.inp containing input information should be provided as described below. 

OCC 187  UNOCC 94
NT 344 NBEG 1  NSKP 1 NPROJ 281
IPROJ 1-281
NI 187 NA 94
AXIS 1 0 0
EVFILE info
EHR -18.6547 -1.1881
POP DMAT  
DOS EF  -3.16037   EMIN -18.6547 EMAX -1.1881 ESIG 0.1 NE 101


Where OCC and UNOCC are total number of occupied and unoccupied levels.
NT is the total number of time steps, NBEG is the number of frames to begin with, NSKP is the number of frmaes to skip for DOS, NPROJ is the number of projections required.
IPROJ is the list of states to be projected.
NI and NA are the number of occupied and unoccupied states to calculate.
AXIS gets the direction of polarization of the field.
EVFILE gets the input file info.
EHR gets the energy range of the top and bottom of the Kohm Sham states whose projections are required.
POP, DMAT and DOS are keywords to calculate time dependent populations and projections in KS occupied and unoccupied basis. 
EF is the fermi energy, EMIN and EMAX are the top and bottom energy values within which time dependent dos need to be computed, ESIG is the gaussian broadeing and NE is the number of points.

----------------------------------Usage----------------------------------------------------------------

$ python3 tddenmat.py My_tdden.inp

files such as projections, info, oct_projections.py, binner.py are required for the calculations.
