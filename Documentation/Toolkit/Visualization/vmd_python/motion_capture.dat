---------------------------------------------------A Python Module to cature the dynamics from a set of cube files--------------------
Purpose
 Many interesting evolving phenamena from simulations like TDDFT can be visualised by storing the observable like time dependent induced charge density in cube format and playing it in the form of a vedio.
 Facts like large number of state involved in the calculation, plus long propagation time, large system size makes it impossible for researchers to explore this data using conventional visualization softwares as they requires each cube files to be opened and visualise manually. 

 To over come this issue some visualization softwares like vmd have facility for inbuilt scripting. We combined this feature of vmd with a 3D animation software Blender to capture the isosurface plots of a number of cube files and make a movie  out of it. In this manner the dynamics of the evolving simulation can be captured.

Dependencies

 This module require VMD to be installed and accesible in the directory you are running the command. This module requires the blender suite to be downloaded and stored in the system you are running(for linux based machine, no blender installation is required).   


Usage

 $  python3 vmd_python.py 5 0.0001  /home/vignesh/Downloads/blender/blender-2.93.2-linux-x64/blender

   where 5 is the number of cube files. Next three numbers are rotational axes. Next Three numbers are the translational axes. Next line is the path to the blender excutable.
   
   Two python files vmd_python.py and blend_vedio.py is required for the execution. A tcl script by name vmd.tcl will be created.

   The output vedio would be aviailable in /tmp/ directory.

The Code and what it does.

vmd_python.py
---------------------------------------------------------------------------------
import os              # importing os for running terminal commands
import sys             # importing sys for taking arguments
from PIL import Image  # importing PIL for converting TGA to PNG format


                       # n is the number of cube files
n = int(sys.argv[1])

                       # a,b,c are ratational axes
a = int(sys.argv[2])
b = int(sys.argv[3])
c = int(sys.argv[4])

                       # x,y,c are translational axes
x = float(sys.argv[5])
y = float(sys.argv[6])
z = float(sys.argv[7])

blender_path = sys.argv[8]


                       # file to write the tcl script
f = open("vmd.tcl","w")

                       # decaring the lines of tcl scripts one by one
one_line   = "menu main off"
two_line  = "axes location off"
three_line   = ["for {set i 0} {$i < ",str(n),"} {incr i} {"]
four_line  = "   mol new $i.cube"
five_line  = "   if {$i == 0} {"
six_line  = "    display projection orthographic"
seven_line   = "    light 0 on"
eight_line  =  "    light 1 on"
nine_line  =  "    light 2 on"
ten_line =  "    light 3 on"
eleven_line  = "    color Display {Background} white"
twelve_line  = "    color Name {H} gray"
thirteen_line  = ["    rotate x by ",str(a)]
fourteen_line  = ["    rotate y by ",str(b)]
fifteen_line  = ["    rotate z by ",str(c)]
sixteen_line  = "    scale by 1.10"
sixteen_a_line = ["    translate by ",str(x)," ",str(y)," ",str(z)]
seventeen_line  = "    global viewpoints"
eighteen_line   ="    set viewpoints(0) [molinfo 0 get rotate_matrix]"
nineteen_line  = "    set viewpoints(1) [molinfo 0 get center_matrix]"
twenty_line   = "    set viewpoints(2) [molinfo 0 get scale_matrix]"
twentyone_line  = "    set viewpoints(3) [molinfo 0 get global_matrix]"
twentytwo_line   = "  }"
twentythree_line  = "  molinfo $i set center_matrix $viewpoints(1)"
twentyfour_line  = "  molinfo $i set rotate_matrix $viewpoints(0)"
twentyfive_line   = "  molinfo $i set scale_matrix $viewpoints(2)"
twentysix_line  = "  molinfo $i set global_matrix $viewpoints(3)"
twentyseven_line   = "  mol delrep 0 $i"
twentyeight_line  = "  mol representation CPK 0.3 0.0 100.0 100.0"
twentynine_line   = "  mol material HardPlastic"
thirty_line  = "  mol addrep $i"
thirtyone_line   = "  mol representation isosurface 0.03 0.0 0.0 0.0 1 1"
thirtytwo_line  = "  mol color ColorID 0"
thirtytwo_a_line = "  mol material HardPlastic"
thirtythree_line   = "  mol addrep $i"
thirtyfour_line  = "  mol representation isosurface 0.06 0.0 0.0 0.0 1 1"
thirtyfive_line   = "  mol color ColorID 7"
thirtysix_line  = "  mol material HardPlastic"
thirtyseven_line   = "  mol addrep $i"
thirtyeight_line  = "  mol representation isosurface 0.10 0.0 0.0 0.0 1 1"
thirtynine_line  = "  mol color ColorID 4"
fourty_line   = "  mol material HardPlastic"
fourtyone_line  = "  mol addrep $i"
fourtytwo_line   = "  mol representation isosurface 0.20 0.0 0.0 0.0 1 1"
fourtythree_line  = "  mol color ColorID 1"
fourtyfour_line   = "  mol material HardPlastic"
fourtyfive_line  = "  mol addrep $i"
fourtysix_line   = "  mol clipplane normal 0 1 $i {0.0 1.0 0.0}"
fourtyseven_line  = "  mol clipplane normal 0 2 $i {0.0 1.0 0.0}"
fourtyeight_line   = "  mol clipplane normal 0 3 $i {0.0 1.0 0.0}"
fourtynine_line  = "  mol clipplane normal 0 4 $i {0.0 1.0 0.0}"
fifty_line  = "  mol clipplane status 0 1 $i {1}"
fiftyone_line   = "  mol clipplane status 0 2 $i {1}"
fiftytwo_line  = "  mol clipplane status 0 3 $i {1}"
fiftythree_line   = "  mol clipplane status 0 4 $i {1}"
fiftyfour_line  = "  render Tachyon $i.dat"
fiftyfive_line   = "  /usr/local/lib/vmd/tachyon_LINUXAMD64 -aasamples 12 12 $i.dat -format TGA -res 1600 1200 -o $i.tga"
fiftysix_line  = "  mol delete $i"
fiftyseven_line   = "}"
fiftyeight_line = "exit"

                             #writing the tcl script
f.writelines(one_line)
f.write("\n")
f.writelines(two_line)
f.write("\n")
f.writelines(three_line)
f.write("\n")
f.writelines(four_line)
f.write("\n")
f.writelines(five_line)
f.write("\n")
f.writelines(six_line)
f.write("\n")
f.writelines(seven_line)
f.write("\n")
f.writelines(eight_line)
f.write("\n")
f.writelines(nine_line)
f.write("\n")
f.writelines(ten_line)
f.write("\n")
f.writelines(eleven_line)
f.write("\n")
f.writelines(twelve_line)
f.write("\n")
f.writelines(thirteen_line)
f.write("\n")
f.writelines(fourteen_line)
f.write("\n")
f.writelines(fifteen_line)
f.write("\n")
f.writelines(sixteen_line)
f.write("\n")
f.writelines(sixteen_a_line)
f.write("\n")
f.writelines(seventeen_line)
f.write("\n")
f.writelines(eighteen_line)
f.write("\n")
f.writelines(nineteen_line)
f.write("\n")
f.writelines(twenty_line)
f.write("\n")
f.writelines(twentyone_line)
f.write("\n")
f.writelines(twentytwo_line)
f.write("\n")
f.writelines(twentythree_line)
f.write("\n")
f.writelines(twentyfour_line)
f.write("\n")
f.writelines(twentyfive_line)
f.write("\n")
f.writelines(twentysix_line)
f.write("\n")
f.writelines(twentyseven_line)
f.write("\n")
f.writelines(twentyeight_line)
f.write("\n")
f.writelines(twentynine_line)
f.write("\n")
f.writelines(thirty_line)
f.write("\n")
f.writelines(thirtyone_line)
f.write("\n")
f.writelines(thirtytwo_line)
f.write("\n")
f.writelines(thirtytwo_a_line)
f.write("\n")
f.writelines(thirtythree_line)
f.write("\n")
f.writelines(thirtyfour_line)
f.write("\n")
f.writelines(thirtyfive_line)
f.write("\n")
f.writelines(thirtysix_line)
f.write("\n")
f.writelines(thirtyseven_line)
f.write("\n")
f.writelines(thirtyeight_line)
f.write("\n")
f.writelines(thirtynine_line)
f.write("\n")
f.writelines(fourty_line)
f.write("\n")
f.writelines(fourtyone_line)
f.write("\n")
f.writelines(fourtytwo_line)
f.write("\n")
f.writelines(fourtythree_line)
f.write("\n")
f.writelines(fourtyfour_line)
f.write("\n")
f.writelines(fourtyfive_line)
f.write("\n")
f.writelines(fourtysix_line)
f.write("\n")
f.writelines(fourtyseven_line)
f.write("\n")
f.writelines(fourtyeight_line)
f.write("\n")
f.writelines(fourtynine_line)
f.write("\n")
f.writelines(fifty_line)
f.write("\n")
f.writelines(fiftyone_line)
f.write("\n")
f.writelines(fiftytwo_line)
f.write("\n")
f.writelines(fiftythree_line)
f.write("\n")
f.writelines(fiftyfour_line)
f.write("\n")
f.writelines(fiftyfive_line)
f.write("\n")
f.writelines(fiftysix_line)
f.write("\n")
f.writelines(fiftyseven_line)
f.write("\n")
f.writelines(fiftyeight_line)
f.write("\n")
f.close()

                                # running the tcl script
os.system("vmd -e vmd.tcl")
                                # converting images generated in TGA format to PNG format
for i in range(n):
    Image.open(str(i)+".tga").save(str(i)+".png")
                               #  making a directory by name image to copy all png file into it
os.system("mkdir image")           
os.system("cp *.png image")    # copying files to image directory 
os.system(blender_path+" -b -P blend_vedio.py") # running the blender code to generate vedio
-----------------------------------------------------------------------------------------

blend_vedio.py
-----------------------------------------------------------------------------------------
import os         # importing os to get folder paths
import bpy        # importing bpy which is the blender module for python

dir_path = os.path.dirname(os.path.realpath(__file__)) # getting current working directory
path = dir_path+"/image"              # getting path to image folder
file_path = os.listdir(path)          # getting contents of image directory
file_path.sort()                      # sorting the contents of the image directory
for area in bpy.context.screen.areas: # setting the area of blender to 'VIEW_3D'
  if area.type == 'VIEW_3D':

       bpy.context.scene.sequence_editor_create()

       movie = bpy.context.scene.sequence_editor.sequences.new_image(
                  name="photos", filepath=os.path.join(path, file_path[0]),
                  channel=1, frame_start=1)  # Declaring the image sequencer 

       for o in file_path:
           movie.elements.append(o)         # initializing the image sequencer
       bpy.context.scene.render.fps = 1     # one frame per second
       bpy.context.scene.frame_end =  len(file_path) # last frame
       bpy.context.scene.render.ffmpeg.format = 'MPEG4' # output vedio format
       bpy.ops.render.render(animation=True)            # Finally rendering the vedio.
-----------------------------------------------------------------------------------------
