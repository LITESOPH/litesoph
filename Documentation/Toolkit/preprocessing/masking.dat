--------------------------------Purpose---------------------------------------
This code masks a region of the simulation box, So that the external perturbation is not allowed in this region. In this way we can target particular region of the simulation box and study various energy tranfer phenamena in the masked region.

----------------------------Dependencies--------------------------------------

The calculation requires dipolemomentwriter_mask.py, external_mask.py and masking.py. MaskedElectricField and DipoleMomentWriter need to be imported from external_mask.py and dipolemomentwriter_mask.py respectively in the input .py file for time dependent run. Mask should be imported from Masking.py in external_mask.py. 



---------------------------Usage-------------------------------------------------

Some important changes need to be incorporated in implement masking in the input .py file for the time dependent calculation.
An example script is given below. parameters such as mask and ext should be included. Type = Plane introduces a plane to separate the masked and unmasked region. A sphere can also be introduced.  Axis = 0 divides the x axis. 1 and 2 does the same for y and z. X0 = 0.5 divides the simulation box into two equal halfs. Boundary can be either smooth or abrupt at the interface of the masked and unmasked region. Rsig is the smoothning function. Direction of polarization is defined in ext in the form [0.,0.,1.0] corresponding to [x,y,z]

import numpy as np
from ase.units import Hartree, Bohr
#from gpaw.external import ConstantElectricField
from external_mask import MaskedElectricField
from gpaw.lcaotddft import LCAOTDDFT
from gpaw.lcaotddft.laser import GaussianPulse
from dipolemomentwriter_mask import DipoleMomentWriter

# Temporal shape of the time-dependent potential
pulse = GaussianPulse(1e-5, 10e3, 2.41, 0.3, 'sin')
# Spatial shape of the time-dependent potential
mask={"Type":"Plane", "Axis":0, "X0":0.5, "Boundary":"Smooth", "Rsig":0.1}
ext = MaskedElectricField(Hartree / Bohr, [0., 0., 1.0], mask=mask)

# Full time-dependent potential
td_potential = {'ext': ext, 'laser': pulse}

# Write the temporal shape to a file
pulse.write('pulse.dat', np.arange(0, 30e3, 10.0))

# Set up the time-propagation calculation
td_calc = LCAOTDDFT('gs.gpw', td_potential=td_potential,
                    txt='tdpulse.out')

# Attach the data recording and analysis tools
DipoleMomentWriter(td_calc, 'dmpulse.dat', mask=ext.mask)

# Propagate
td_calc.propagate(20, 1500)

# Save the state for restarting later
td_calc.write('tdpulse.gpw', mode='all')

